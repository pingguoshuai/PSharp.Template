<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeSmith.Engine</name>
    </assembly>
    <members>
        <member name="P:CodeSmith.Engine.MergeContext.OutputFile">
            <summary>
            The file path that is being modified.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.MergeContext.OutputContent">
            <summary>
            The content that the template generated.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.MergeContext.SourceContent">
            <summary>
            The previous content waiting to be merged.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetGenerator.GenerateSnippet(System.String,System.String,System.String@)">
            <summary>
            Generates the snippet.
            </summary>
            <param name="rawLine">The raw line.</param>
            <param name="targetExtension">The target extension.</param>
            <param name="output">The snippet output.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetGenerator.OutputUsage(System.String,System.String)">
            <summary>
            Outputs the usage.
            </summary>
            <param name="rawLine">The raw line.</param>
            <param name="targetExtension">The target extension.</param>
        </member>
        <member name="M:CodeSmith.Engine.Compiler.AssemblyReference.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CodeSmith.Engine.Compiler.AssemblyReference"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Compiler.AssemblyReference.#ctor(Microsoft.Build.Framework.ITaskItem)">
            <summary>
              Initializes a new instance of the <see cref="T:CodeSmith.Engine.Compiler.AssemblyReference"/> class.
            </summary>
            <param name="taskItem">The MSBuild task item to get the properties from.</param>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.Original">
            <summary>
              Gets or sets the original name used to request the assembly resolve.
            </summary>
            <value>
              The original name.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.Name">
            <summary>
              Gets or sets the assembly name.
            </summary>
            <value>
              The assembly name.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.FullName">
            <summary>
              Gets or sets the full assembly name.
            </summary>
            <value>
              The full assembly name.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.FullPath">
            <summary>
              Gets or sets the full path to the assembly.
            </summary>
            <value>
              The path to the assembly.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.CopyLocal">
            <summary>
              Gets or sets a value indicating the assembly should be copied local.
            </summary>
            <value>
              <c>true</c> if copy local; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.GlobalAssemblyCache">
            <summary>
              Gets a value indicating whether the assembly was loaded from the global assembly cache.
            </summary>
            <value>
              <c>true</c> if the assembly was loaded from the global assembly cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.ResolvedFrom">
            <summary>
              Gets or sets the location where the assembly was resolved from.
            </summary>
            <value>
              The location where the assembly was resolved from.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.ShadowPath">
            <summary>
              Gets or sets the full path to the assemblies new local path.
            </summary>
            <value>
              The path to the assembly local path.
            </value>
        </member>
        <member name="M:CodeSmith.Engine.Compiler.AssemblyResolver.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CodeSmith.Engine.Compiler.AssemblyResolver"/> class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyResolver.Current">
            <summary>
              Gets the current instance of <see cref="T:CodeSmith.Engine.Compiler.AssemblyResolver"/>.
            </summary>
            <value>The current instance.</value>
        </member>
        <member name="T:CodeSmith.Engine.CodeTemplateCompiler">
            <summary>
            This class can be used to compile templates.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.CodeTemplateCompiler"/> instance.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.#ctor(CodeSmith.Engine.ICodeTemplateInfo)">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.CodeTemplateCompiler"/> instance.
            </summary>
            <param name="codeTemplateInfo">Code template info.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.Boolean)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="forceRecompile">Force recompile.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.String)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="outputPath">Output path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.String,System.Boolean)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="outputPath">Output path.</param>
            <param name="forceRecompile">Force recompile.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="outputPath">Output path.</param>
            <param name="forceRecompile">Force recompile.</param>
            <param name="inMemory"></param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.CreateInstance">
            <summary>
            Creates an instance of the compiled template.  You must compile the template first.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.CodeTemplateInfo">
            <summary>
            Gets the code template information.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.Debug">
            <summary>
            Gets or sets a value indicating whether the template should be compiled in debug mode or not.
            </summary>
            <value>
            	<c>true</c> if debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.LinePragmas">
            <summary>
            Gets or sets a value indicating whether line pragmas should be output in the compiled source code.
            </summary>
            <value>
            	<c>true</c> if line pragmas should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.KeepTempFiles">
            <summary>
            Gets or sets a value indicating whether the temp files should be kept.
            </summary>
            <value>
            	<c>true</c> if you want to keep the temp files; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.Namespace">
            <summary>
            Namespace that the compiled template should be a member of.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.TypeName">
            <summary>
            Gets or sets the type name of the compiled template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.CompiledAssembly">
            <summary>
            Provides access to the compiled assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.GeneratedAssemblySourceCode">
            <summary>
            Provides access to the generated source code.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.CompilerOutputWriter">
            <summary>
            Gets or sets the compiler output writer.
            </summary>
            <value></value>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateInfo.GetHashCode">
            <summary>
            Gets the hash code based on the template dependencies.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.FullPath">
            <summary>
            Gets the full path to the template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.FileName">
            <summary>
            Gets the name of the template file.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.DirectoryName">
            <summary>
            Gets the name of the directory the template is located in.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.Language">
            <summary>
            Gets the template language.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.TargetLanguage">
            <summary>
            Gets the target language.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.TemplateEncoding">
            <summary>
            Gets the response encoding.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.Description">
            <summary>
            Gets the description.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.DateCreated">
            <summary>
            Gets the date the template was created.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.DateModified">
            <summary>
            Gets the date the template was modified.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.ContentHashCode">
            <summary>
            Gets the hash code based on the template content and all template Dependencies.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.OutputType">
            <summary>
            Gets the type of the output for this template.
            </summary>
            <value>The type of the output.</value>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="!:DisposableBase"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.TemplateContext.SetContext(CodeSmith.Engine.CodeTemplate)">
            <summary>
            Adds a <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> instance to the current thread's <see cref="T:CodeSmith.Engine.TemplateContext"/>.
            </summary>
            <param name="template">The currently executing CodeTemplate</param>
            <returns>An instance of the current TemplateContext.</returns>
        </member>
        <member name="M:CodeSmith.Engine.TemplateContext.Dispose">
            <summary>
            Cleans up all resources associated with the <see cref="T:CodeSmith.Engine.TemplateContext"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.Current">
            <summary>
            Returns the <see cref="T:CodeSmith.Engine.TemplateContext"/> data associated with the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.CodeTemplate">
            <summary>
            Returns the <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> that is being rendered in the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.ParentCodeTemplate">
            <summary>
            Returns the Parent <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> that is being rendered in the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.RootCodeTemplate">
            <summary>
            Returns the Root <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> that is being rendered in the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.TemplateError.#ctor(CodeSmith.Engine.TemplateError,System.String)">
            <summary>
            Creates a new Template Error while setting the SourceFilePath property.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.MSBuildProjectUtility.IncludeOutputsMetadataName">
            <summary></summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.MSBuildProjectUtility.GetDefaultItemType(System.String)">
            <summary>
            Gets the item type for the file type.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:CodeSmith.Engine.Utility.MSBuildProjectUtility.CodeSmithSafeImport">
            <summary>
            Gets the CodeSmith safe import.
            </summary>
            <value>The CodeSmith safe import.</value>
        </member>
        <member name="T:CodeSmith.Engine.Remoting.IHostChannel">
            <summary>
            This is the channel from the client (child) process to the host (parent) process.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.IHostChannel.ClientReady(CodeSmith.Engine.Remoting.IClientChannel)">
            <summary>
            This is called by the client when it is ready to receive messages.
            </summary>
            <param name="clientChannel">A pointer to the client channel</param>
        </member>
        <member name="P:CodeSmith.Engine.Remoting.IHostChannel.HostProcess">
            <summary>
            The process id of the host (parent) process.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Remoting.IClientChannel">
            <summary>
            This is the channel from the host (parent) proccess to the client (child) process.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Remoting.HostedProcessBase`1">
            <summary>
            A class to aid in remoting with a host process. 
            </summary>
            <remarks>
            There can only be one HostProcess for the current process.  
            Initialize must be called to wire up the host process remoting.
            When the client is fully started and ready to receive message, 
            ClientReady must be called to alert the host process that messages
            can be sent.
            </remarks>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Remoting.HostedProcessBase`1"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.RaiseMessageReceived(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageReceived"/> event.
            </summary>
            <param name="remoteMessage">The remote message.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.RaiseMessageSent(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageSent"/> event.
            </summary>
            <param name="remoteMessage">The remote message.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.RaiseMessageError(System.Exception)">
            <summary>
            Raises the message error.
            </summary>
            <param name="error">The error that occurred.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.Initialize(System.String)">
            <summary>
            Initializes <see cref="T:CodeSmith.Engine.Remoting.HostedProcessBase`1"/> by getting the <see cref="P:CodeSmith.Engine.Remoting.HostedProcessBase`1.HostChannel"/> from
            the specified host ipc URI. Must be called before calling other methods.
            </summary>
            <param name="hostIpcUri">The host ipc URI.</param>
            <remarks>
            Initialize must be called before any other method in the class.
            Initialize can only be called once, additional calls will be ignored
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when host remoting channel can not be loaded from <paramref name="hostIpcUri"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.ClientReady(CodeSmith.Engine.Remoting.IClientChannel)">
            <summary>
            Alerts the host process that the client is ready to receive messages.  Must be called after Initialize.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.CreateClient(System.Func{CodeSmith.Engine.Remoting.IClientChannel})">
            <summary>
            Alerts the host process that the client is ready to receive messages.  Must be called after Initialize.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.SendMessageAsync(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Sends message to host async. Initialize must be called before this.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.SignalShutdown">
            <summary>
            Shutdown was initiated in the client.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageReceived">
            <summary>
            Occurs when a message is received from the remote process.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageSent">
            <summary>
            Occurs when a message is sent to the host process.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageError">
            <summary>
            Raised when an error is thrown by <see cref="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.SendMessageAsync(CodeSmith.Engine.Remoting.RemoteMessage)"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IPropertySerializer">
            <summary>
            Interface that all property serializers must implement.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.SaveProperty(CodeSmith.Engine.PropertySerializerContext,System.Object)">
            <summary>
            This method will be used to save the property value when a template is being compiled.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="propertyValue">The property to be saved.</param>
            <returns>An object that will be stored in a Hashtable during template compilation.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.LoadProperty(CodeSmith.Engine.PropertySerializerContext,System.Object)">
            <summary>
            This method will be used to restore the property value after a template has been compiled.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="propertyValue">The property to be loaded.</param>
            <returns>The value to be assigned to the template property after it has been compiled.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.WritePropertyXml(CodeSmith.Engine.PropertySerializerContext,System.Xml.XmlWriter,System.Object)">
            <summary>
            This method will be used when serializing the property value to an XML property set.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="writer">The XML writer that the property value will be written to.</param>
            <param name="propertyValue">The property to be serialized.</param>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.ReadPropertyXml(CodeSmith.Engine.PropertySerializerContext,System.Xml.XmlNode)">
            <summary>
            This method will be used when deserializing the property from an XML property set.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="propertyValue">The XML node to read the property value from.</param>
            <returns>The value to be assigned to the template property.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.ParseDefaultValue(CodeSmith.Engine.PropertySerializerContext,System.String)">
            <summary>
            This method will be used to parse a default value for a property when a template is being instantiated.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="defaultValue">The default value.</param>
            <returns>An object that will be assigned to the template property.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCodeAsync(System.String)">
            <summary>
            Begin generating code asynchronous
            </summary>
            <param name="xmlFilePath">The project file to generate</param>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCode(System.String)">
            <summary>
            Generates a CodeSmith Project file based on the file path to the csp.
            </summary>
            <param name="xmlFilePath">File path to the csp file.</param>
            <returns>true if the csp was generated.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.TryGetValue(System.String,System.String,System.Object@)">
            <summary>
            Access's the Registry and gets the string value of the specific SubKey.
            </summary>
            <param name="subKey">The SubKey.</param>
            <param name="name">The name of the key.</param>
            <param name="value">The value returned from the registry.</param>
            <returns>Returns true if the object is not null.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.UpgradeFile``1(System.String)">
            <summary>
            Attempts to update configuration from a configuration file. The version of CodeSmith must be older than CodeSmith 5.1.
            </summary>
            <typeparam name="T">Type of the configuration class.</typeparam>
            <param name="fileName">The configuration filename.</param>
            <returns>Updated Configuration file if a configuration file was found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.FindVersions(System.String)">
            <summary>
            Finds all configuration files with a specified name.
            </summary>
            <param name="fileName">Configuration file name.</param>
            <returns>A List of configuration files with the specified file name.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.EnsureInitialize">
            <summary>
            This method is here purely to make sure that we don't make a double call to the Initialize method while initializing configuration.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.Find(System.String,System.String)">
            <summary>
            Finds the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <param name="targetExtension">The target extension.</param>
            <returns>The <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that match closest to the alias, extension pair.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.Find(System.String,System.String,System.Boolean)">
            <summary>
            Finds the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <param name="targetExtension">The target extension.</param>
            <param name="exactMatchOnly">If true, the target extension must match.</param>
            <returns>The <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that matches the passed in alias and targetExtension</returns>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.FindSimilar(System.String,System.String)">
            <summary>
            Finds the <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that match closest to the alias.
            </summary>
            <param name="partialAlias">The partial alias.</param>
            <param name="targetExtension">The target extension.</param>
            <returns>
            The <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that match closest to the alias.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetConfiguration.SnippetMappings">
            <summary>
            A collection of Active Snippet maps.
            </summary>
            <remarks>
            The key for the collection is the alias of the template map.
            </remarks>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetConfiguration.Instance">
            <summary>
            Gets the current singleton instance of Configuration.
            </summary>
            <value>The current singleton instance.</value>
            <remarks>
            An instance of Configuration wont be created until the very first 
            call to the sealed class. This is a CLR optimization that
            provides a properly lazy-loading singleton. 
            </remarks>
        </member>
        <member name="T:CodeSmith.Engine.ActiveSnippetConfiguration.Nested">
            <summary>
            Nested class to lazy-load singleton.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.Nested.#cctor">
            <summary>
            Initializes the Nested class.
            </summary>
            <remarks>
            Explicit static constructor to tell C# compiler not to mark type as beforefieldinit.
            </remarks>
        </member>
        <member name="F:CodeSmith.Engine.ActiveSnippetConfiguration.Nested.Current">
            <summary>
            Current singleton instance.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IIndexed">
            <summary>
            Interface defining an indexed object.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IIndexed.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TargetLanguage">
            <summary>
            Gets or sets the target language.
            </summary>
            <value>The target language.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TemplateFile">
            <summary>
            Gets or sets the template file.
            </summary>
            <value>The template file.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.PreviousTemplateFile">
            <summary>
            Returns the original template file name.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
            <value>The name of the template.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.DisplayName">
            <summary>
            Gets the name of the display.
            </summary>
            <value>The name of the display.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TargetExtensions">
            <summary>
            Gets or sets the target file extensions.
            </summary>
            <value>The target extensions.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.PropertySet">
            <summary>
            Gets or sets the property set.
            </summary>
            <value>The property set.</value>
        </member>
        <member name="T:CodeSmith.Engine.VirtualCollectionBase`1">
            <summary>
            A base Collection used to load data on depand from database.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetCount">
            <summary>
            Gets the count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetIndex(`0)">
            <summary>
            Gets the index.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetItem(System.Int32)">
            <summary>
            Gets the item.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the Collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted. </param>
            <param name="item">The object to insert. The value can be null (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the Collection. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.IsCompatibleObject(System.Object)">
            <summary>
            Determines whether the specified value is compatible with Collection.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            	<c>true</c> if is a compatible object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.VerifyValueType(System.Object)">
            <summary>
            Verifies the type of the value.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the type T at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.CachedConfiguration.CachedData.Value">
            <summary>
            Value to be cached.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Configuration"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.LoadDefaults">
            <summary>
            This method will safely upgrade the default values for collections and overwrite any directory settings.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.UpgradeRegistry">
            <summary>
            The following method will check the registry and see if an upgrade is needed.
            </summary>
            <returns>Returns true if the registry is up to date; returns false if there is no previous registry version.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.UpdateLinesGenerated(System.String)">
            <summary>
            Updates Lines Generated based off of the passed in string containing source code.
            </summary>
            <param name="generatedCode">Source code.</param>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.GetHoursSaved">
            <summary>
            Returns the numbers of hours saved by using CodeSmith.
            </summary>
            <returns>Returns the numbers of hours saved by using CodeSmith.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.GetMoneySaved">
            <summary>
            Returns the amount of money saved by using CodeSmith.
            </summary>
            <returns>Returns the amount of money saved by using CodeSmith.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.GetIconResourcePath">
            <summary>
            Returns the path to the icon resource dll.
            </summary>
            <returns>Returns the path to the icon resource dll.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.ExtractEmbeddedLicense(System.String,System.Reflection.Assembly)">
            <summary>
            Extracts an embedded license if it was found.
            </summary>
            <param name="filePath">The full path to store the license file.</param>
            <param name="assembly">The assembly that contains the license file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.SetLicenseAssembly(System.Reflection.Assembly)">
            <summary>
            Checks an assembly for an embedded license.
            </summary>
            <param name="assembly">The assembly with the embedded license.</param>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.TrackLinesGenerated">
            <summary>
            Gets or sets a value indicating whether to track lines generated.
            </summary>
            <value><c>true</c> to track lines generated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.LinesGenerated">
            <summary>
            Gets or sets the number of lines generated.
            </summary>
            <value>The number of lines generated.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.AverageLinesPerHour">
            <summary>
            Gets or sets the average lines per hour.
            </summary>
            <value>The average lines per hour.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.AverageCostPerHour">
            <summary>
            Gets or sets the average cost per hour.
            </summary>
            <value>The average cost per hour.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.ApplicationDirectory">
            <summary>
            Gets or sets the application directory.
            </summary>
            <value>The application directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.MergeStrategyAliases">
            <summary>
            Gets the merge strategy aliases.
            </summary>
            <value>The merge strategy aliases.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.LanguageRegionDefinitions">
            <summary>
            Gets the language region definitions.
            </summary>
            <value>The language region definitions.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.PropertyDesignerMaps">
            <summary>
            Gets the property designer maps.
            </summary>
            <value>The property designer maps.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.ConditionalCompilation">
            <summary>
            Gets the conditional compilation statements for the compiler.
            </summary>
            <value>The conditional compilation.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithBaseSampleDirectory">
            <summary>
            Gets or sets the base CodeSmith sample directory.
            </summary>
            <value>The CodeSmith sample directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithSampleDirectory">
            <summary>
            Gets or sets the CodeSmith sample directory.
            </summary>
            <value>The CodeSmith sample directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithMapsDirectory">
            <summary>
            Gets or sets the CodeSmith maps directory.
            </summary>
            <value>The CodeSmith maps directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithTemplatesDirectory">
            <summary>
            Gets or sets the CodeSmith templates directory.
            </summary>
            <value>The CodeSmith templates directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithDataDirectory">
            <summary>
            Gets or sets the CodeSmith data directory.
            </summary>
            <value>The CodeSmith data directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.TemplateCacheDirectory">
            <summary>
            Gets or sets the template cache directory.
            </summary>
            <value>The template cache directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.PropertySetCacheDirectory">
            <summary>
            Gets or sets the property set cache directory.
            </summary>
            <value>The property set cache directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.PluralOverridesMapFile">
            <summary>
            Gets or sets the plural overrides map file.
            </summary>
            <value>The plural overrides map file.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CustomerExperienceImprovementProgramEnabled">
            <summary>
            Controls whether the Customer Experience Improvement Program is enabled.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.ProbingPath">
            <summary>
            Gets or sets the semicolon delimited list of assembly probing paths. The path is relative to ApplicationDirectory.
            </summary>
            <value>The semicolon delimited list of assembly probing paths.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.IsEmbeddedEntryAssembly">
            <summary>
            Returns true if CodeSmith Explorer, CodeSmith Studio, or Console was not the entry assembly.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.EntryAssemblyName">
            <summary>
            Returns the name of the current Entry Assembly.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.Instance">
            <summary>
            Gets the current singleton instance of Configuration.
            </summary>
            <value>The current singleton instance.</value>
            <remarks>
            An instance of Configuration wont be created until the very first
            call to the sealed class. This is a CLR optimization that
            provides a properly lazy-loading singleton.
            </remarks>
        </member>
        <member name="T:CodeSmith.Engine.Configuration.Nested">
            <summary>
            Nested class to lazy-load singleton.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.Nested.#cctor">
            <summary>
            Initializes the Nested class.
            </summary>
            <remarks>
            Explicit static constructor to tell C# compiler not to mark type as beforefieldinit.
            </remarks>
        </member>
        <member name="F:CodeSmith.Engine.Configuration.Nested.Current">
            <summary>
            Current singleton instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase`1.LoadSettings">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase`1.SaveSettings">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ConfigurationBase`1.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>The singleton instance.</value>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationItemBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.ConfigurationItemBase"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationItemBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.ConfigurationItemBase"/> class.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:CodeSmith.Engine.ConfigurationItemBase.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="E:CodeSmith.Engine.ConfigurationItemBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IndexedEnumerable">
            <summary>
            IndexedEnumerable makes enumerating over collections much easier by implementing properties like: IsEven, IsOdd, IsLast.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an IndexedEnumerable from any collection implementing IEnumerable&lt;T&gt;
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">Source enumerable</param>
            <returns>A new IndexedEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable.AsIndexedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an IndexedEnumerable from any collection implementing IEnumerable&lt;T&gt;
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">Source enumerable</param>
            <returns>A new IndexedEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="T:CodeSmith.Engine.IndexedEnumerable`1">
            <summary>
            IndexedEnumerable makes enumerating over collections much easier by implementing properties like: IsEven, IsOdd, IsLast.
            </summary>
            <typeparam name="T">Type to iterate over</typeparam>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor that takes an IEnumerable&lt;T&gt;
            </summary>
            <param name="enumerable">The collection to enumerate.</param>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumeration of Entry objects.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-generic form of GetEnumerator.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IndexedEnumerable`1.EntryItem">
            <summary>
            Represents each entry returned within a collection,
            containing the _value and whether it is the first and/or
            the last entry in the collection's. enumeration
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.Value">
            <summary>
            The Entry Value.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsFirst">
            <summary>
            Returns true if it is the first item in the collection.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsLast">
            <summary>
            Returns true if it is the last item in the collection.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.Index">
            <summary>
            The index of the current item in the collection.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsEven">
            <summary>
            Returns true if the current item has an even index
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsOdd">
            <summary>
            Returns true if the current item has an odd index
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.RemoteProcessBase.RaiseMessageReceived(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Remoting.RemoteProcessBase.MessageReceived"/> event.
            </summary>
            <param name="remoteMessage">The remote message.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.RemoteProcessBase.SendMessageAsync(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Sends a message to the remote process
            </summary>
            <param name="message"></param>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.RemoteProcessBase.ProcessAvailable">
            <summary>
            Occurs when the remote process is available.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.RemoteProcessBase.ProcessStarting">
            <summary>
            Occurs when the remote process is starting.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.RemoteProcessBase.MessageReceived">
            <summary>
            Occurs when a message is received from the remote process.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Remoting.RemoteProcessBase.ExecutablePath">
            <summary>
            Gets or sets the executable path for the remote process.
            </summary>
            <value>
            The executable path for the remote process.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Remoting.RemoteProjectProcess.Current">
            <summary>
            Gets the current singleton instance of RemoteProjectProcess.
            </summary>
            <value>The current singleton instance.</value>
            <remarks>
            An instance of RemoteProjectProcess wont be created until the very first 
            call to the sealed class. This is a CLR optimization that
            provides a properly lazy-loading singleton. 
            </remarks>
        </member>
        <member name="T:CodeSmith.Engine.Utility.CommandLineBuilder">
            <summary>
            Comprises utility methods for constructing a command line.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Utility.CommandLineBuilder"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Utility.CommandLineBuilder"/> class.
            </summary>
            <param name="commandLine">The command line to start with.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendFileNameIfNotNull(System.String)">
            <summary>
            Appends the command line with file name represented by the parameter, inserting quotation marks if necessary.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendFileNamesIfNotNull(System.String[],System.String)">
            <summary>
            Appends the command line with a list of file names, inserting quotation marks if necessary. 
            </summary>
            <param name="fileNames">The file names to append. If the array is null reference, then this method has no effect.</param>
            <param name="delimiter">The delimiter to put between file names in the command line.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendFileNameWithQuoting(System.String)">
            <summary>
            Appends the command line with a file name, and surrounds the file name with quotation marks as necessary.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSpaceIfNotEmpty">
            <summary>
            Appends the space if command line is not empty.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitch(System.String)">
            <summary>
            Appends the command line with the specified switch. 
            </summary>
            <param name="switchName">Name of the switch.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfTrue(System.String,System.Boolean)">
            <summary>
            Appends the switch if true.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotNull(System.String,System.String)">
            <summary>
            Appends the switch if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotDefault``1(System.String,``0)">
            <summary>
            Appends the switch if not default.
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotDefault``1(System.String,``0,``0)">
            <summary>
            Appends the switch if not default.
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotNull(System.String,System.String[],System.String)">
            <summary>
            Appends the switch if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameters">The parameters.</param>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchUnquotedIfNotNull(System.String,System.String)">
            <summary>
            Appends the switch unquoted if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchUnquotedIfNotNull(System.String,System.String[],System.String)">
            <summary>
            Appends the switch unquoted if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameters">The parameters.</param>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendTextUnquoted(System.String)">
            <summary>
            Appends the text unquoted.
            </summary>
            <param name="textToAppend">The text to append.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendTextWithQuoting(System.String)">
            <summary>
            Appends the text with quoting.
            </summary>
            <param name="textToAppend">The text to append.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.IsQuotingRequired(System.String)">
            <summary>
            Determines whether [is quoting required] [the specified parameter].
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if [is quoting required] [the specified parameter]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.VerifyThrowNoEmbeddedDoubleQuotes(System.String,System.String)">
            <summary>
            Verifies the throw no embedded double quotes.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.VerifyThrowArgumentNull(System.Object,System.String)">
            <summary>
            Verifies the throw argument null.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="P:CodeSmith.Engine.Utility.CommandLineBuilder.CommandLine">
            <summary>
            Gets the command line buffer.
            </summary>
            <value>The command line.</value>
        </member>
        <member name="T:CodeSmith.Engine.DelimitedStringCollection">
            <summary>
            A collection that provides notifications when items get added, removed, or when the whole list is refreshed. 
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/> class.
            </summary>
            <param name="delimitedValues">The delimited values.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.BlockReentrancy">
            <summary>
            Disallows reentrant attempts to change this collection.
            </summary>
            <returns>An IDisposable object that can be used to dispose of the object.</returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.CheckReentrancy">
            <summary>
            Checks for reentrant attempts to change this collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.InsertItem(System.Int32,System.String)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.OnCollectionChanged">
            <summary>
            Raises the CollectionChanged event with the provided arguments.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the provided arguments.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.SetItem(System.Int32,System.String)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the values.
            </summary>
            <param name="values">The values.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the values.
            </summary>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToArray">
            <summary>
            Returns an array of strings that represents the current collection.
            </summary>
            <returns>An array of strings that represents the current collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.AddDelimited(System.String)">
            <summary>
            Adds the split values from <paramref name="delimitedValues"/> to the collection.
            The string is split using the <see cref="P:CodeSmith.Engine.DelimitedStringCollection.Delimiter"/> property.
            </summary>
            <param name="delimitedValues">The delimited values.</param>
            <returns>The number of values added.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="delimitedValues"/> is null.</exception>
        </member>
        <member name="P:CodeSmith.Engine.DelimitedStringCollection.Delimiter">
            <summary>
            Gets or sets the string delimiter.
            </summary>
            <value>The string delimiter.</value>
        </member>
        <member name="E:CodeSmith.Engine.DelimitedStringCollection.PropertyChanged">
            <summary>
            Occurs when a property value changed.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.DelimitedStringCollection.CollectionChanged">
            <summary>
            Occurs when the collection changed.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter">
            <summary>
            A type converter for the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.IConfiguration.LoadDefaultSettings">
            <summary>
            Loads the default settings.
            </summary>
            <remarks>
            This method is called when existing config file is not 
            found.  Use this method to populate the configuration 
            class with default values.
            </remarks>
        </member>
        <member name="M:CodeSmith.Engine.IConfiguration.UpgradeFile(System.IO.FileInfo@)">
            <summary>
            Upgrades the file.
            </summary>
            <param name="file">The file to upgrade.</param>
            <remarks>
            This method is called just before loading a previous config 
            file. Use this method to modify the file before it is loaded.
            </remarks>
        </member>
        <member name="M:CodeSmith.Engine.IConfiguration.UpgradeSettings">
            <summary>
            Upgrades the settings.
            </summary>
            <remarks>
            This method is called after loading a previous config file. 
            Use this method to change any existing configurations to
            work with the latest version.
            </remarks>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.CanWatchFile">
            <summary>
            Gets a value indicating whether this instance can watch file.
            </summary>
            <value>
            	<c>true</c> if this instance can watch file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.ConfigurationFile">
            <summary>
            Gets the configuration file.
            </summary>
            <value>The configuration file.</value>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.IsBackwardCompatible">
            <summary>
            Gets a value indicating whether this configuration is backward compatible.
            </summary>
            <value>
            	<c>true</c> if this configuration is backward compatible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.ConfigurationVersion">
            <summary>
            Gets or sets the configuration version.
            </summary>
            <value>The configuration version.</value>
        </member>
        <member name="P:CodeSmith.Engine.LanguageRegionDefinition.LanguageKeys">
            <summary>
            Gets the list of language keys for the region defintion.
            </summary>
            <value>The language keys.</value>
        </member>
        <member name="P:CodeSmith.Engine.LanguageRegionDefinition.RegionStartRegex">
            <summary>
            Gets or sets the region start regex.
            </summary>
            <value>The region start regex.</value>
        </member>
        <member name="P:CodeSmith.Engine.LanguageRegionDefinition.RegionEndRegex">
            <summary>
            Gets or sets the region end regex.
            </summary>
            <value>The region end regex.</value>
        </member>
        <member name="P:CodeSmith.Engine.MergeStrategyAlias.Name">
            <summary>
            Gets or sets the name of the merge strategy alias.
            </summary>
            <value>The merge strategy alias name.</value>
        </member>
        <member name="P:CodeSmith.Engine.MergeStrategyAlias.TypeName">
            <summary>
            Gets or sets the fully qualified type name for the merge strategy.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:CodeSmith.Engine.PropertyDesignerMap.DataTypes">
            <summary>
            Gets the list of data types the designer should be used for.
            </summary>
            <value>The data types.</value>
        </member>
        <member name="P:CodeSmith.Engine.PropertyDesignerMap.EditorType">
            <summary>
            Gets or sets the type of the editor.
            </summary>
            <value>The type of the editor.</value>
        </member>
        <member name="P:CodeSmith.Engine.PropertyDesignerMap.SerializerType">
            <summary>
            Gets or sets the type of the serializer.
            </summary>
            <value>The type of the serializer.</value>
        </member>
        <member name="T:CodeSmith.Engine.CodeTemplate">
            <summary>
            All templates must derive from this class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnInit">
            <summary>
            This method can be overridden to perform logic when the template instance is created.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetPropertyDefaults">
            <summary>
            This method is overridden in templates to set default values in a template instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetUnknownDirectiveAttributes">
            <summary>
            This method is overridden in templates to set unknown directive attributes in the ContextData.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPreRender">
            <summary>
            This method can be overridden to perform logic before the template is rendered.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnError(System.Exception)">
            <summary>
            This method can be overridden to perform logic when a template exception occurs.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPropertyChanged(System.String)">
            <summary>
            This method can be overridden to perform logic when a property changes.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPropertiesLoaded">
            <summary>
            This method can be overridden to perform logic when properties are loaded.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPropertiesSaved">
            <summary>
            This method can be overridden to perform logic when properties are saved.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Render(System.IO.TextWriter)">
            <summary>
            Renders to the template output to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPostRender(System.String)">
            <summary>
            This method can be overridden to perform logic after the template is rendered.
            </summary>
            <param name="result">The template output.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToString">
            <summary>
            Renders the template output to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToString(System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,System.Boolean)">
            <summary>
            Renders the template output to a file.
            </summary>
            <param name="path">The output file path.</param>
            <param name="overwrite">if set to <c>true</c> overwrite file.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,System.String,System.Boolean)">
            <summary>
            Renders the template output to a file.
            </summary>
            <param name="path">The output file path.</param>
            <param name="dependentUpon">The file that the output is dependent upon.</param>
            <param name="overwrite">if set to <c>true</c> overwrite file.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(CodeSmith.Engine.OutputFile,System.Boolean)">
            <summary>
            Renders the template output to a file.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="overwrite">if set to <c>true</c> overwrite file.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a file using a merge strategy.
            </summary>
            <param name="path">The output path.</param>
            <param name="strategy">The merge strategy to use.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a file using a merge strategy.
            </summary>
            <param name="path">The output path.</param>
            <param name="strategy">The merge strategy to use.</param>
            <param name="sourcePath">The source file to base the merge on.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(CodeSmith.Engine.OutputFile,System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a file using a merge strategy.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="strategy">The merge strategy to use.</param>
            <param name="sourcePath">The source file to base the merge on.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Validate">
            <summary>
            Validates this template instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCustomValidationErrors">
            <summary>
            Allows the developer to add custom ValidationErrors to the validation collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetFileName">
            <summary>
            Gets a default name for the template output.  This can be overridden in your template to provide a suitable name for the output of the template based on the property values.
            </summary>
            <returns>A file name (E.G., output.txt).</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetContextData(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Set the context data object for the template.
            Any items in the current ContextData object will be added to the new one.
            This method should only be called while a template is initializing.
            </summary>
            <param name="contextData">The context data object.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.ParseDefaultValue(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Parses the default value for properties.  This can be overridden to provide custom default parsing logic.
            </summary>
            <param name="targetProperty">Target property.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetPropertyAttribute(System.String,System.String)">
            <summary>
            Gets the property attribute.  Property attributes can be used to store various information at the property level.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The value of the attribute</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetPropertyAttribute(System.String,System.String,System.String)">
            <summary>
            Sets the property attribute.  Property attributes can be used to store various information at the property level.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetTemplateAttribute(System.String)">
            <summary>
            Gets the template attribute.  Template attributes can be used to store various information at the template level.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The value of the attribute</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetTemplateAttribute(System.String,System.String)">
            <summary>
            Sets the template attribute.  Template attributes can be used to store various information at the template level.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetProperties">
            <summary>
            Gets information on all of the properties on this template.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetProperties(System.Boolean)">
            <summary>
            Gets information on all of the properties on this template.
            </summary>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetRequiredProperties">
            <summary>
            Gets information on all of the required properties for this template.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToHashtable">
            <summary>
            Saves the properties to a Hashtable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToHashtable(System.Boolean)">
            <summary>
            Saves the properties to a Hashtable.
            </summary>
            <returns></returns>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToHashtable(System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Saves the properties to a Hashtable.
            </summary>
            <returns></returns>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
            <param name="ignorePropertyNames">Ignores the specified list of property names when copying properties to the template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RestorePropertiesFromHashtable(System.Collections.Hashtable)">
            <summary>
            Restores the properties from a Hashtable.
            </summary>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToXmlFile(System.String)">
            <summary>
            Saves the properties to an XML file.
            </summary>
            <param name="xmlFilePath">XML file path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate)">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
            <param name="ignorePropertyNames">Ignores the specified list of property names when copying properties to the template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate,System.Boolean)">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate,System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
            <param name="ignorePropertyNames">Ignores the specified list of property names when copying properties to the template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RestorePropertiesFromXmlFile(System.String)">
            <summary>
            Restores the properties from XML file.
            </summary>
            <param name="xmlFilePath">XML file path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToXml(System.Xml.XmlWriter)">
            <summary>
            Saves the properties to XML.
            </summary>
            <param name="xmlwriter">XmlWriter.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToXml">
            <summary>
            Saves the properties to XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RestorePropertiesFromXml(System.String,System.String)">
            <summary>
            Restores the properties from XML.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <param name="baseDirectory">The base directory to resolve file references.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value for the specified property.
            </summary>
            <param name="name">Property name.</param>
            <param name="value">Value to assign.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the value for the specified property.
            </summary>
            <param name="propertyInfo">Information about the target property.</param>
            <param name="value">Value to assign.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetProperty(System.String)">
            <summary>
            Gets the value for the specified property.
            </summary>
            <param name="name">Property name.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCodeTemplateInstance(System.String)">
            <summary>
            Gets an instance of the specified template.
            </summary>
            <param name="templatePath">Path to the template.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCodeTemplateInstance(System.String,System.Boolean)">
            <summary>
            Gets an instance of the specified template.
            </summary>
            <param name="templatePath">Path to the template.</param>
            <param name="forceRecompile">Forces the template to be recompiled instead of using the cache.</param>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCodeTemplateInstance(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets an instance of the specified template.
            </summary>
            <param name="templatePath">Path to the template.</param>
            <param name="forceRecompile">Forces the template to be recompiled instead of using the cache.</param>
            <param name="shareContextData">Share template context data with the child template instance.</param>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnOutputRegistered(CodeSmith.Engine.OutputRegisteredEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPreOutputWritten(CodeSmith.Engine.OutputCancelEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPreOutputWritten(System.String)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnReferenceRegistered(CodeSmith.Engine.ItemRegisteredEventArgs)">
            <summary>
            Raises the <see cref="T:CodeSmith.Engine.ItemRegisteredEventArgs"/> event.
            </summary>
            <param name="e">The <see cref="T:CodeSmith.Engine.ItemRegisteredEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RegisterReference(System.String)">
            <summary>
            Registers the reference. When generating from within Visual Studio, these references will be added to the project.
            </summary>
            <param name="referenceName">Name of the reference.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Create``1">
            <summary>
            Gets an instance of the specified template type.  Should be used with the Register directive.
            </summary>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Create``1(System.Boolean)">
            <summary>
            Gets an instance of the specified template type.  Should be used with the Register directive.
            </summary>
            <param name="shareContextData">Share template context data with the child template instance.</param>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.Response">
            <summary>
            Response stream for the template output.  You can write to the stream programmatically using this property.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.Progress">
            <summary>
            Provides a way to report execution progress for the template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.State">
            <summary>
            State of this template instance.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.CodeTemplateInfo">
            <summary>
            Gets the information for the current template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.ValidationErrors">
            <summary>
            Gets the validation errors for this template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.ContextData">
            <summary>
            Contextual data items can be stored in this object and shared with sub-templates.  This data will not be persisted with the template property set.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.CodeTemplate.OutputRegistered">
            <summary>
                Raised when an output file is registered
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.CodeTemplate.PreOutputWritten">
            <summary>
                Raised prior to an output being written to disk
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.CodeTemplate.ReferenceRegistered">
            <summary>
            Occurs when a reference is registered.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateWriter.Indent">
            <summary>
            Increments the IndentLevel by one.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateWriter.IndentLevel">
            <summary>
            The number of tabs or spaces the generated output should indent.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateWriter.IndentValue">
            <summary>
            This value is outputted once for each Indent Level. IndentValue defaults to one tab.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.NotCheckedAttribute">
            <summary>
            Excludes a property from being required.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OptionalAttribute">
            <summary>
            Marks a property as optional.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OutputFile">
            <summary>
            A class representing a template output file.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="dependentUpon">The file that output is dependent upon.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="dependentUpon">The file that output is dependent upon.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.op_Implicit(System.String)~CodeSmith.Engine.OutputFile">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:CodeSmith.Engine.OutputFile"/>.
            </summary>
            <param name="outputFile">The output file.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.op_Implicit(CodeSmith.Engine.OutputFile)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:CodeSmith.Engine.OutputFile"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="outputFile">The output file.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:CodeSmith.Engine.OutputFile.OutputFileName">
            <summary>
            Gets the name of the output file.
            </summary>
            <value>The name of the output file.</value>
        </member>
        <member name="P:CodeSmith.Engine.OutputFile.DependentUpon">
            <summary>
            Gets or sets the dependent upon file.
            </summary>
            <value>The dependent upon file.</value>
        </member>
        <member name="P:CodeSmith.Engine.OutputFile.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:CodeSmith.Engine.ItemRegisteredEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ItemRegisteredEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.ItemRegisteredEventArgs"/> class.
            </summary>
            <param name="itemName">Name of the item.</param>
        </member>
        <member name="P:CodeSmith.Engine.ItemRegisteredEventArgs.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="T:CodeSmith.Engine.OutputCancelEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OutputRegisteredEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.OutputRegisteredEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputRegisteredEventArgs"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputRegisteredEventArgs.#ctor(CodeSmith.Engine.OutputFile)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputRegisteredEventArgs"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="P:CodeSmith.Engine.OutputRegisteredEventArgs.OutputFile">
            <summary>
            Gets or sets the output file.
            </summary>
            <value>The output file.</value>
        </member>
        <member name="M:CodeSmith.Engine.OutputCancelEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputCancelEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.OutputCancelEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputCancelEventArgs"/> class.
            </summary>
            <param name="outputFile"></param>
        </member>
        <member name="M:CodeSmith.Engine.OutputCancelEventArgs.#ctor(CodeSmith.Engine.OutputFile)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputCancelEventArgs"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="P:CodeSmith.Engine.OutputCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this output is canceled
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeSmith.Engine.OutputCancelEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OutputRegisteredEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Progress">
            <summary>
            Progress information.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Progress.PerformStep">
            <summary>
            Performs a progress step.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Progress.Increment(System.Int32)">
            <summary>
            Increments the current progress value by the specified amount.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="E:CodeSmith.Engine.Progress.OnProgress">
            <summary>
            Occurs when the progress value has been changed.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Progress.OnStatusChanged">
            <summary>
            Occurs when the progress value has been changed.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.Status">
            <summary>
            Current status for the operation.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.MinimumValue">
            <summary>
            Minimum progress value.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.MaximumValue">
            <summary>
            Maximum progress value.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.Value">
            <summary>
            Gets or sets the current progress value.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.Progress.Step">
            <summary>
            Gets or sets the step increment value.
            </summary>
            <value></value>
        </member>
        <member name="T:CodeSmith.Engine.ValidationError">
            <summary>
            Provides information about a template validation error.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ValidationError.Message">
            <summary>
            The Validation Message
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ValidationError.PropertyName">
            <summary>
            The name of the Property.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorCompleteEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Boolean,System.Collections.Generic.ICollection{CodeSmith.Engine.OutputFile})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="result">if set to <c>true</c> generation was successful.</param>
            <param name="registeredOutputs">The registered outputs.</param>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Boolean,System.Collections.Generic.ICollection{CodeSmith.Engine.OutputFile},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="result">if set to <c>true</c> [result].</param>
            <param name="registeredOutputs">The registered outputs.</param>
            <param name="registeredReferences">The registered references.</param>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Boolean,System.Collections.Generic.ICollection{CodeSmith.Engine.OutputFile},System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="result">if set to <c>true</c> [result].</param>
            <param name="registeredOutputs">The registered outputs.</param>
            <param name="registeredReferences">The registered references.</param>
            <param name="cspFileName">The file path of the CodeSmith project file.</param>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorCompleteEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorErrorEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorErrorEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
                Use this constructor to initialize the event arguments
                object with the custom event fields
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorErrorEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorProgressEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.MessageEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.MessageEventArgs.#ctor(System.String)">
            <summary>
                Use this constructor to initialize the event arguments
                object with the custom event fields
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.MessageEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorProgressEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.CodeSmithLicense._licenseUsageCountsChecked">
            <summary>
            This ensures that if the licensing is reset during runtime, that this is only ever incremented once.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithLicense.CheckForFeaturesNotAllowed">
            <summary>
            This method checks to see if you are using invalid features of CodeSmith.
            E.G. You are using CodeSmith Professional and register a CodeSmith Standard Key.
                 This will cause CodeSmith Generator Studio to close.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.TrialRegistrationPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodeSmith.Engine.Map.GetMapFiles">
            <summary>
            Gets the map files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Map.Load(System.String)">
            <summary>
            Loads the specified name.
            </summary>
            <param name="fullPath">The path.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Map.LoadFromName(System.String)">
            <summary>
            Loads the map with the specified name by trying to resolve the path.
            </summary>
            <param name="name">The name of the map.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Map.TryResolvePath(System.String,System.String,System.String@)">
            <summary>
            Tries the resolve path.
            </summary>
            <param name="mapName">Name of the map.</param>
            <param name="baseDirectory">The base directory.</param>
            <param name="fullPath">The full path.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="caseSensitive">Whether map lookups should be case sensitive or not.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <param name="reverse">if set to <c>true</c> the key and value will be reversed.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <param name="reverse">if set to <c>true</c> the key and value will be reversed.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Save(System.String)">
            <summary>
            Saves the specified map file name.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Load(System.String)">
            <summary>
            Loads the specified map file name.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Load(System.String,System.Boolean)">
            <summary>
            Loads the specified map file name.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.ContainsValue(System.String)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.TryGetValue(System.String,System.String@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#String}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.CaseSensitive">
            <summary>
            Whether the map lookups should be case Sensitive.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Reversed">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.MapCollection"/> key value pair is reversed.
            </summary>
            <value><c>true</c> if reversed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.ReturnKeyWhenNotFound">
            <summary>
            Gets or sets a value indicating whether to return the key when its not found in the collection.
            </summary>
            <value><c>true</c> to return the key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.DefaultValue">
            <summary>
            Gets or sets the default value for when the key is not found.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Item(System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:CodeSmith.Engine.IMergeStrategy">
            <summary>
            This interface can be implemented to create a merge strategy.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IMergeStrategy.Init(System.String)">
            <summary>
            Initialize the merge strategy by passing in an initialization string.
            </summary>
            <param name="init">Initialization string.</param>
        </member>
        <member name="M:CodeSmith.Engine.IMergeStrategy.Merge(CodeSmith.Engine.MergeContext)">
            <summary>
            Merge the template output with the existing content.
            </summary>
            <param name="context">A reference to the MergeContext.</param>
            <returns></returns>
        </member>
        <member name="T:CodeSmith.Engine.InsertRegionMergeStrategy">
            <summary>
            This merge strategy can be used to insert the template output into a named region inside an existing file
            and preserve the rest of the content in the file.  The initialization string should be of the format:
            "RegionName=&lt;RegionName&gt;;Language=&lt;Language&gt;"
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.PreserveRegionsMergeStrategy">
            <summary>
            This merge strategy can be used to preserve designated custom regions inside an existing file and
            regenerate the rest of the content in the file.  The initialization string should be of the format:
            "RegionNameRegex=&lt;RegexExpression&gt;;Language=&lt;Language&gt;"
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.E_InvalidTrialKeyOrFailure">
            <summary>
              Looks up a localized string similar to The trial key is invalid. Please try again or contact customer service for assistance..
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.E_MustUseRegister">
            <summary>
              Looks up a localized string similar to The key you entered appears to be a full license key.  Please use the Register button to register your license..
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_GetTrialKey">
            <summary>
              Looks up a localized string similar to Request Trial Key.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_TrialKey">
            <summary>
              Looks up a localized string similar to Trial Key.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_TrialNotice">
            <summary>
              Looks up a localized string similar to Please enter your {0} trial key and click Try.  If you do not have a trial key, please click the Request Trial Key link on the left.  If you already have a license, click the Register button below..
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_TrialTitle">
            <summary>
              Looks up a localized string similar to Enter Trial Key.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IPropertyRefresher">
            <summary>
            Interface that all property refreshers must implement.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.PropertyRefresherContext">
            <summary>
            Context information passed into the IPropertyRefresher methods.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertyRefresherContext.PropertyInfo">
            <summary>
            The property that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertyRefresherContext.Instance">
            <summary>
            The CodeTemplate instance that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertyRefresherContext.WorkingDirectory">
            <summary>
            The working directory for resolving and creating relative paths.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveFile(System.String)">
            <summary>
            Saves the project to a file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveFile(System.String,System.Boolean)">
            <summary>
            Saves the project to a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="relativePaths">if set to <c>true</c> make paths relative.</param>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveToString">
            <summary>
            Saves project to string.
            </summary>
            <returns>An XML string of the project.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveToString(System.Boolean)">
            <summary>
            Saves project to string.
            </summary>
            <param name="applyVariables">if set to <c>true</c> apply variables.</param>
            <returns>An XML string of the project.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.MakePathsRelative">
            <summary>
            Makes the paths relative to the directory of <see cref="P:CodeSmith.Engine.Schema.CodeSmithProject.FileName"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.InsertVariables(CodeSmith.Engine.Schema.CodeSmithProject)">
            <summary>
            Inserts variables into the property set where the value matches.
            </summary>
            <param name="csp">The original project.</param>
            <returns>A new instance of CodeSmithProject.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.ReplaceVariables(CodeSmith.Engine.Schema.CodeSmithProject)">
            <summary>
            Replaces variables in the property set with the variables value.
            </summary>
            <param name="csp">The original project.</param>
            <returns>A new instance of CodeSmithProject.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFile(System.String)">
            <summary>
            Loads the project from a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads the project from a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="replaceVariables">if set to <c>true</c> replace variables.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFromString(System.String)">
            <summary>
            Loads the project from a string.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFromString(System.String,System.Boolean)">
            <summary>
            Loads from string.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <param name="replaceVariables">if set to <c>true</c> replace variables.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.SingleOutput">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.DefaultTemplate">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.Variables">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.DefaultProperties">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.PropertySets">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.DefaultTemplate.Path">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Property.ChildNodes">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Property.Name">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Property.Value">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Properties">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Name">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Enabled">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Output">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Template">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.MergeType">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.MergeInit">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.SingleOutput.Path">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Variable.Key">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Variable.Value">
            <remarks/>
        </member>
        <member name="T:CodeSmith.Engine.PropertySerializerContext">
            <summary>
            Context information passed into the IPropertySerializer methods.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.PropertySerializerContext.#ctor(System.Reflection.PropertyInfo,CodeSmith.Engine.CodeTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.PropertySerializerContext"/> class.
            </summary>
            <param name="propertyInfo">The property that the context points to.</param>
            <param name="instance">The CodeTemplate instance that the context points to.</param>
        </member>
        <member name="M:CodeSmith.Engine.PropertySerializerContext.#ctor(System.Reflection.PropertyInfo,CodeSmith.Engine.CodeTemplate,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.PropertySerializerContext"/> class.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="instance">The instance.</param>
            <param name="workingDirectory">The working directory.</param>
        </member>
        <member name="P:CodeSmith.Engine.PropertySerializerContext.PropertyInfo">
            <summary>
            The property that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertySerializerContext.Instance">
            <summary>
            The CodeTemplate instance that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertySerializerContext.WorkingDirectory">
            <summary>
            The working directory for resolving and creating relative paths.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlPropertyDirectiveTypeConverter">
            <summary>
            This class can be used to convert to and from an XmlNode for a class that supports XML serialization.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlPropertyFilePicker">
            <summary>
            This type editor can be used on a class that supports XML serialization to allow the user to pick an XML file and have that XML file deserialized into the target class.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlPropertyTypeConverter">
            <summary>
            This class can be used to convert to and from an XmlNode for a class that supports XML serialization.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlSchemaFilePicker">
            <summary>
            Allows you to browse for an XSD Schema.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1">
            <summary>
            The AdoHelper class is intended to encapsulate high performance, scalable best practices for
            common data access uses.
            </summary>
            <typeparam name="TFactory">The type of the factory.</typeparam>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter(System.String,System.Object)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="value">The value of the specified parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="direction">The System.Data.ParameterDirection of the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="sourceColumn">The source column of the parameter</param>
            <param name="sourceVersion">The System.Data.DataRowVersion of the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AttachParameters(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method is used to attach array of IDataParameters to an IDbCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of IDataParameterParameters to be added to command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CleanParameterSyntax(System.Data.IDbCommand)">
            <summary>
            This method cleans up the parameter syntax for the provider
            </summary>
            <param name="command">The IDbCommand containing the parameters to clean up.</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.PrepareCommand(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The IDbCommand to be prepared</param>
            <param name="connection">A valid IDbConnection, on which to execute this command</param>
            <param name="transaction">A valid IDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ClearCommand(System.Data.IDbCommand)">
            <summary>
            This method clears (if necessary) the connection, transaction, command type and parameters 
            from the provided command
            </summary>
            <remarks>
            Not implemented here because the behavior of this method differs on each data provider. 
            </remarks>
            <param name="command">The IDbCommand to be cleared</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <returns>A DataSet containing the resultset generated by the command</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new IDbParameter("@prodid", 24));
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, "GetOrders", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, "GetOrders", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example><code>
             DataSet ds = helper.ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(tran, "GetOrders", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the database
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            </remarks>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            </remarks>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbCommand,CodeSmith.Engine.AdoHelper{`0}.AdoConnectionOwnership)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <param name="connectionOwnership">Enum indicating whether the connection was created internally or externally.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[],CodeSmith.Engine.AdoHelper{`0}.AdoConnectionOwnership)">
            <summary>
            Create and prepare an IDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid IDbConnection, on which to execute this command</param>
            <param name="transaction">A valid IDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by AdoHelper</param>
            <returns>IDataReader containing the results of the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(connString, "GetOrders", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, "GetOrders", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example><code>
             IDataReader dr = helper.ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(tran, "GetOrders", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(tran, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(tran, "GetOrderCount", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the transaction is rolled back or commmitted</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbCommand,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <example>
            <code>
            helper.FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            helper.FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example>
            <code>
            helper.FillDataset(tran, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(tran, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Private helper method that execute an IDbCommand (that returns a resultset) against the specified IDbTransaction and IDbConnection
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.RowUpdating(System.Object,System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            This method consumes the RowUpdatingEvent and passes it on to the consumer specifed in the call to UpdateDataset
            </summary>
            <param name="obj">The object that generated the event</param>
            <param name="e">The System.Data.Common.RowUpdatingEventArgs</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.RowUpdated(System.Object,System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            This method consumes the RowUpdatedEvent and passes it on to the consumer specifed in the call to UpdateDataset
            </summary>
            <param name="obj">The object that generated the event</param>
            <param name="e">The System.Data.Common.RowUpdatingEventArgs</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.SetCommand(System.Data.IDbCommand,System.Boolean@)">
            <summary>
            Set up a command for updating a DataSet.
            </summary>
            <param name="command">command object to prepare</param>
            <param name="mustCloseConnection">output parameter specifying whether the connection used should be closed by the DAAB</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.UpdateDataset(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <example>
            <code>
            helper.UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </code></example>
            <param name="insertCommand">A valid SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.UpdateDataset(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.DataSet,System.String,CodeSmith.Engine.AdoHelper{`0}.RowUpdatingHandler,CodeSmith.Engine.AdoHelper{`0}.RowUpdatedHandler)">
            <summary> 
            Executes the IDbCommand for each inserted, updated, or deleted row in the DataSet also implementing RowUpdating and RowUpdated Event Handlers 
            </summary> 
            <example> 
            <code>
            RowUpdatingEventHandler rowUpdatingHandler = new RowUpdatingEventHandler( OnRowUpdating ); 
            RowUpdatedEventHandler rowUpdatedHandler = new RowUpdatedEventHandler( OnRowUpdated ); 
            helper.UpdateDataSet(sqlInsertCommand, sqlDeleteCommand, sqlUpdateCommand, dataSet, "Order", rowUpdatingHandler, rowUpdatedHandler); 
            </code></example> 
            <param name="insertCommand">A valid SQL statement or stored procedure to insert new records into the data source</param> 
            <param name="deleteCommand">A valid SQL statement or stored procedure to delete records from the data source</param> 
            <param name="updateCommand">A valid SQL statement or stored procedure used to update records in the data source</param> 
            <param name="dataSet">The DataSet used to update the data source</param> 
            <param name="tableName">The DataTable used to update the data source.</param> 
            <param name="rowUpdatingHandler">RowUpdatingEventHandler</param> 
            <param name="rowUpdatedHandler">RowUpdatedEventHandler</param> 
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.String,System.String,System.String[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example>
            <code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid IDbCommand object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.Data.IDbConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example>
            <code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid IDbCommand object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.String,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">A valid SQL statement</param>
            <param name="commandType">A System.Data.CommandType</param>
            <param name="commandParameters">The parameters for the SQL statement</param>
            <returns>A valid IDbCommand object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example><code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">A valid SQL statement</param>
            <param name="commandType">A System.Data.CommandType</param>
            <param name="commandParameters">The parameters for the SQL statement</param>
            <returns>A valid IDbCommand object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) 
            against the database specified in the connection string using the 
            dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on row values.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified
            IDbTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the paraemter values based on row values.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CheckForReturnValueParameter(System.Object[])">
            <summary>
            Checks for the existence of a return value parameter in the parametervalues
            </summary>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>true if the parameterValues contains a return value parameter, false otherwise</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AreParameterValuesIDataParameters(System.Object[],System.Data.IDataParameter[])">
            <summary>
            Check to see if the parameter values passed to the helper are, in fact, IDataParameters.
            </summary>
            <param name="parameterValues">Array of parameter values passed to helper</param>
            <param name="iDataParameterValues">new array of IDataParameters built from parameter values</param>
            <returns>True if the parameter values are IDataParameters</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of IDataParameterParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid IDataConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSetInternal(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetCachedParameterSet(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetCachedParameterSetInternal(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CacheParameterSet(System.Data.IDbConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CacheParameterSetInternal(System.Data.IDbConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.DiscoverSpParameterSet(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of IDataParameters for a stored procedure
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.m_rowUpdated">
            <summary>
            Internal handler used for bubbling up the event to the user
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.m_rowUpdating">
            <summary>
            Internal handler used for bubbling up the event to the user
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetConnection(System.String)">
            <summary>
            Returns an IDbConnection object for the given connection string
            </summary>
            <param name="connectionString">The connection string to be used to create the connection</param>
            <returns>An IDbConnection object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetDataAdapter">
            <summary>
            Returns an IDbDataAdapter object
            </summary>
            <returns>The IDbDataAdapter</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Calls the CommandBuilder.DeriveParameters method for the specified provider, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The IDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the IDbCommand. </param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter">
            <summary>
            Returns an IDataParameter object
            </summary>
            <returns>The IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AddUpdateEventHandlers(System.Data.IDbDataAdapter,CodeSmith.Engine.AdoHelper{`0}.RowUpdatingHandler,CodeSmith.Engine.AdoHelper{`0}.RowUpdatedHandler)">
            <summary>
            Provider specific code to set up the updating/ed event handlers used by UpdateDataset
            </summary>
            <param name="dataAdapter">DataAdapter to attach the event handlers to</param>
            <param name="rowUpdatingHandler">The handler to be called when a row is updating</param>
            <param name="rowUpdatedHandler">The handler to be called when a row is updated</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetDataParameters(System.Int32)">
            <summary>
            Returns an array of IDataParameters of the specified size
            </summary>
            <param name="size">size of the array</param>
            <returns>The array of IDataParameters</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetBlobParameter(System.Data.IDbConnection,System.Data.IDataParameter)">
            <summary>
            Handle any provider-specific issues with BLOBs here by "washing" the IDataParameter and returning a new one that is set up appropriately for the provider.
            </summary>
            <param name="connection">The IDbConnection to use in cleansing the parameter</param>
            <param name="p">The parameter before cleansing</param>
            <returns>The parameter after it's been cleansed.</returns>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.RowUpdatedHandler">
            <summary>
            Delegate for creating a RowUpdatedEvent handler
            </summary>
            <param name="sender">The object that published the event</param>
            <param name="e">The RowUpdatedEventArgs for the event</param>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.RowUpdatingHandler">
            <summary>
            Delegate for creating a RowUpdatingEvent handler
            </summary>
            <param name="sender">The object that published the event</param>
            <param name="e">The RowUpdatingEventArgs for the event</param>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.AdoConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by AdoHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.AdoConnectionOwnership.Internal">
            <summary>Connection is owned and managed by ADOHelper</summary>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.AdoConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache">
            <summary>
            ADOHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache.CloneParameters(System.Data.IDataParameter[])">
            <summary>
            Deep copy of cached IDataParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> class.
            </summary>
            <param name="friendlyName">Name of the friendly.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.CreateInstance``1">
            <summary>
            Creates an instance in the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance in the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/>.
            </summary>
            <param name="args">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.NeedCodeSmithDomain">
            <summary>
            Need a <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/>.
            </summary>
            <returns>true if a <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> is needed.</returns>
        </member>
        <member name="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain">
            <summary>
            Gets the CodeSmith <see cref="T:System.AppDomain"/>.
            </summary>
            <value>The CodeSmith <see cref="T:System.AppDomain"/>.</value>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ExceptionHelper.IsLicenseException(System.Exception)">
            <summary>
            Checks an exception for a licensing related error.
            </summary>
            <param name="ex">The exception</param>
            <returns>Returns true if a licensing exception is found.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Logger.Log">
            <summary>
            Gets the current logger instance or falls back to a default logger.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.PathUtil.RelativePathTo(System.String,System.String)">
            <summary>
            Creates a relative path from one file or folder to another.
            </summary>
            <param name="fromDirectory">Contains the directory that defines the start of the relative path.</param>
            <param name="toPath">Contains the path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:CodeSmith.Engine.Utility.ProcessStatus">
            <summary>
            Provides enumerated values that indicate the current status of a process.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Ready">
            <summary>Process is ready to run.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Running">
            <summary>Process is currently running.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Complete">
            <summary>Process is complete.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Error">
            <summary>Process ran with an error.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.TimedOut">
            <summary>Process timed out.</summary>
        </member>
        <member name="T:CodeSmith.Engine.Utility.ProcessBase">
            <summary>
            A base class to run a process.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Utility.ProcessBase"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.DeleteTempFile(System.String)">
            <summary>
            Deletes the specified temporary file. 
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.Execute">
            <summary>
            Runs the exectuable file with the specified task parameters.
            </summary>
            <returns><c>true</c> if the task runs successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.ExecuteTool(System.String,System.String)">
            <summary>
            Runs the executable file. 
            </summary>
            <param name="pathToTool">The path to tool.</param>
            <param name="commandLineCommands">The command line arguments.</param>
            <returns>The returned exit code of the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.GenerateCommandLineCommands">
            <summary>
            Generates the command line arguments.
            </summary>
            <returns>Returns a string value containing the command line arguments to pass directly to the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.GenerateFullPathToTool">
            <summary>
            Generates the full path to tool.
            </summary>
            <returns>Returns the fully qualified path to the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.GetWorkingDirectory">
            <summary>
            Gets the working directory.
            </summary>
            <returns>Returns the directory in which to run the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.SkipTaskExecution">
            <summary>
            Indicates whether task execution should be skipped. 
            </summary>
            <returns><c>true</c> to skip task execution; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.ValidateParameters">
            <summary>
            Indicates whether all task parameters are valid. 
            </summary>
            <returns><c>true</c> if all task parameters are valid; otherwise, <c>false</c>c>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.AppendStandardError(System.String)">
            <summary>
            Appends to the standard error writer.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.AppendStandardError(System.String,System.Object[])">
            <summary>
            Appends to the standard error writer.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.EnvironmentOverride">
            <summary>
            Gets the override value of the PATH environment variable. 
            </summary>
            <value>The override value of the PATH environment variable.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.ExitCode">
            <summary>
            Gets the returned exit code of the executable file. 
            </summary>
            <value>The returned exit code of the executable file. </value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.Status">
            <summary>
            Gets the status of the process.
            </summary>
            <value>The status of the process.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardErrorEncoding">
            <summary>
            Gets the Encoding of the standard error stream of the task.
            </summary>
            <value>The Encoding of the standard error stream of the task.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardOutputEncoding">
            <summary>
            Gets the Encoding of the standard output stream of the task.
            </summary>
            <value>The Encoding of the standard output stream of the task.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.Timeout">
            <summary>
            Gets or sets the amount of time after which the task executable is terminated. 
            </summary>
            <value>The amount of time after which the task executable is terminated.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.ToolName">
            <summary>
            Gets the name of the executable file to run. 
            </summary>
            <value>The name of the executable file to run.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.ToolPath">
            <summary>
            Gets or sets the path of the executable file to run.
            </summary>
            <value>The path of the executable file to run.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardOutput">
            <summary>
            Gets the standard output stream.
            </summary>
            <value>The standard output.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardError">
            <summary>
            Gets the standard error stream.
            </summary>
            <value>The standard error.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardErrorWriter">
            <summary>
            Gets or sets the standard error writer.
            </summary>
            <value>The standard error writer.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardOutputWriter">
            <summary>
            Gets or sets the standard output writer.
            </summary>
            <value>The standard output writer.</value>
        </member>
        <member name="T:CodeSmith.Engine.Utility.RegistryUtil">
            <summary>
            Utility class for working with the registry.
            NOTE: At some time it would be nice to add automatic detection to see if values exist in the Wow6432Node keys.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetString(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns null if an error occurred, else returns the string value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            Retrieves the specified value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns null if an error occurred, else returns the string value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDWORD(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns 0 if an error occurred, else returns the int value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int32)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns 0 if an error occurred, else returns the int value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetQWORD(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified QWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns 0 if an error occurred, else returns the long value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetQWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int64)">
            <summary>
            Retrieves the specified QWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns 0 if an error occurred, else returns the long value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBoolean(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns false if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBoolean(Microsoft.Win32.RegistryKey,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns false if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBinary(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified Binary value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns null if an error occurred, else returns the byte[] value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBinary(Microsoft.Win32.RegistryKey,System.String,System.String,System.Byte[])">
            <summary>
            Retrieves the specified Binary value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns null if an error occurred, else returns the byte[] value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDateTime(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified DateTime value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns DateTime.Min if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDateTime(Microsoft.Win32.RegistryKey,System.String,System.String,System.DateTime)">
            <summary>
            Retrieves the specified DateTime value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns DateTime.Min if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetValueType(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the type of the specified Registry value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value type for the specified key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            Sets or creates the specified String value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetDWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int32)">
            <summary>
            Sets or creates the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetQWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int64)">
            <summary>
            Sets or creates the specified QWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetBoolean(Microsoft.Win32.RegistryKey,System.String,System.String,System.Boolean)">
            <summary>
            Sets or creates the specified Boolean value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetBinary(Microsoft.Win32.RegistryKey,System.String,System.String,System.Byte[])">
            <summary>
            Sets or creates the specified Binary value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetDateTime(Microsoft.Win32.RegistryKey,System.String,System.String,System.DateTime)">
            <summary>
            Sets or creates the specified DateTime value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CreateSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a new subkey or opens an existing subkey.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <returns>Returns the opened subkey if it could be opened, else returns null.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.DeleteSubKeyTree(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Deletes a subkey and any child subkeys recursively.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Deletes this key under the supplied RegistryKey.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.DeleteValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Deletes the specified value from this (current) key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.RenameSubKey(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Renames a registry key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="destinationSubKey">Then name of the new SubKey.</param>
            <returns>The new SubKey.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CopySubKey(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Copies a registry key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="destinationSubKey">Then name of the destination SubKey.</param>
            <returns>The newly copied SubKey.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CopyHiveKeyRecursively(Microsoft.Win32.RegistryKey,Microsoft.Win32.RegistryKey)">
            <summary>
            Copies a HiveKey Recursively.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="destinationHiveKey">Then name of the destination HiveKey.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Count(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves the number of values in the specified Registry hive.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <returns>Returns the number of sub keys, else returns 0.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Count(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Retrieves the number of values in the specified Registry hive.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="useSubKeyCount"></param>
            <returns>Returns the number of sub keys, else returns 0.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Exists(Microsoft.Win32.RegistryKey)">
            <summary>
            Checks to see if a subkey exists.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <returns>Returns false if the key wasn't found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Exists(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Checks to see if a subkey exists.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <returns>Returns false if the key wasn't found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Exists(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Checks to see if a subkey exists.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">If the name is specified then it will check to see if this value exists.</param>
            <returns>Returns false if the key wasn't found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Find(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            Finds a specific key one level deep from the hivekey.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="value">Value to check.</param>
            <returns>The SubKey name if found; returns string.Empty if not found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Keys(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves all key names under a given hive key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            /// <returns>Retrieves all key names under a given hive key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SubKeys(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves all subkeys under a given hive key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            /// <returns>Retrieves all subkeys under a given hive key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.NextSubKey(Microsoft.Win32.RegistryKey)">
            <summary>
             Returns the next available index in a list of registry sub keys.
            </summary>
            <param name="hiveKey">The hive key.</param>
            <returns>Returns the next number in an indexed list.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CreateCodeSmithKey">
            <summary>
            create the root CodeSmith RegistryKey.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Utility.RegistryUtil.Message">
            <summary>
            This is the Error message, it will be null unless an error occurred.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Utility.RegistryUtil.RootKey">
            <summary>
            Returns the root CodeSmith RegistryKey (E.G Software\CodeSmith).
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Utility.RegistryUtil.Key">
            <summary>
            Returns the CodeSmith RegistryKey (E.G Software\CodeSmith\v6.x).
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.SafeDataReader">
            <summary>
            This is a DataReader that 'fixes' any null values before
            they are returned to our business code.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes the SafeDataReader object to use data from
            the provided DataReader object.
            </summary>
            <param name="dataReader">The source DataReader object containing the data.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetString(System.Int32)">
            <summary>
            Gets a string value from the datareader.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetValue(System.Int32)">
            <summary>
            Gets a value of type <see cref="T:System.Object"/> from the datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt32(System.Int32)">
            <summary>
            Gets an integer from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDouble(System.Int32)">
            <summary>
            Gets a double from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetGuid(System.Int32)">
            <summary>
            Gets a Guid value from the datareader.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Read">
            <summary>
            Reads the next row of data from the datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.NextResult">
            <summary>
            Moves to the next result set in the datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Close">
            <summary>
            Closes the datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets a boolean value from the datareader.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetByte(System.Int32)">
            <summary>
            Gets a byte value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChar(System.Int32)">
            <summary>
            Gets a char value from the datareader.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetData(System.Int32)">
            <summary>
            Invokes the GetData method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Invokes the GetDataTypeName method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets a date value from the datareader.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets a decimal value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFieldType(System.Int32)">
            <summary>
            Invokes the GetFieldType method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFloat(System.Int32)">
            <summary>
            Gets a Single value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt16(System.Int32)">
            <summary>
            Gets a Short value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt64(System.Int32)">
            <summary>
            Gets a Long value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetName(System.Int32)">
            <summary>
            Invokes the GetName method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetOrdinal(System.String)">
            <summary>
            Gets an ordinal value from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetSchemaTable">
            <summary>
            Invokes the GetSchemaTable method of the underlying datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetValues(System.Object[])">
            <summary>
            Invokes the GetValues method of the underlying datareader.
            </summary>
            <param name="values">An array of System.Object to
            copy the values into.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.IsDBNull(System.Int32)">
            <summary>
            Invokes the IsDBNull method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True if called by
            the public Dispose method.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Finalize">
            <summary>
            Object finalizer.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetString(System.String)">
            <summary>
            Gets a string value from the datareader.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetValue(System.String)">
            <summary>
            Gets a value of type <see cref="T:System.Object"/> from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt32(System.String)">
            <summary>
            Gets an integer from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDouble(System.String)">
            <summary>
            Gets a double from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetGuid(System.String)">
            <summary>
            Gets a Guid value from the datareader.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBoolean(System.String)">
            <summary>
            Gets a boolean value from the datareader.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetByte(System.String)">
            <summary>
            Gets a byte value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChar(System.String)">
            <summary>
            Gets a char value from the datareader.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetData(System.String)">
            <summary>
            Invokes the GetData method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDataTypeName(System.String)">
            <summary>
            Invokes the GetDataTypeName method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDateTime(System.String)">
            <summary>
            Gets a date value from the datareader.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDecimal(System.String)">
            <summary>
            Gets a decimal value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFieldType(System.String)">
            <summary>
            Invokes the GetFieldType method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFloat(System.String)">
            <summary>
            Gets a Single value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt16(System.String)">
            <summary>
            Gets a Short value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt64(System.String)">
            <summary>
            Gets a Long value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.IsDBNull(System.String)">
            <summary>
            Invokes the IsDBNull method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.DataReader">
            <summary>
            Get a reference to the underlying data reader
            object that actually contains the data from
            the data source.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.Depth">
            <summary>
            Returns the depth property value from the datareader.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.FieldCount">
            <summary>
            Returns the FieldCount property from the datareader.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.IsClosed">
            <summary>
            Returns the IsClosed property value from the datareader.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.Item(System.String)">
            <summary>
            Returns a value from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.Item(System.Int32)">
            <summary>
            Returns a value from the datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.RecordsAffected">
            <summary>
            Returns the RecordsAffected property value from the underlying datareader.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.SerializableDictionary`2">
            <summary>
            Represents a xml serializable collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This property is reserved, apply the 
            <see cref="T:XmlSchemaProviderAttribute" /> to the class instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" />
            that describes the XML representation of the object that 
            is produced by the <see cref="M:IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the <see cref="M:IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" />
            stream from which the object is deserialized.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" />
            stream to which the object is serialized.</param>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsPlural(System.String)">
            <summary>
            Determines if a string is in plural form based on some simple rules.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsSingular(System.String)">
            <summary>
            Determines if a string is in singular form based on some simple rules.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPlural(System.String)">
            <summary>
            Converts a string to plural based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPlural(System.String,System.String)">
            <summary>
            Converts a string to plural based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMapFile">The plural overrides map file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPlural(System.String,CodeSmith.Engine.MapCollection)">
            <summary>
            Converts a string to plural based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMap">The plural overrides map.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSingular(System.String)">
            <summary>
            Converts a string to singular based on some simple rules.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSingular(System.String,System.String)">
            <summary>
            Converts a string to singular based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMapFile">The plural overrides map file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSingular(System.String,CodeSmith.Engine.MapCollection)">
            <summary>
            Converts a string to singular based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMap">The plural overrides map.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToCamelCase(System.String)">
            <summary>
            Converts a string to use camelCase.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPascalCase(System.String)">
            <summary>
            Converts a string to use PascalCase.
            </summary>
            <param name="value">Text to convert</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSpacedWords(System.String)">
            <summary>
            Takes a NameIdentifier and spaces it out into words "Name Identifier".
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ContainsSpace(System.String)">
            <summary>
            Determines if a string value contains a space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ContainsString(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines if a string value contains any of the strings passed in.
            </summary>
            <param name="source"></param>
            <param name="wordList"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsNumeric(System.String)">
            <summary>
            Determines if a string is a numeric value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.AppendOrdinalSuffix(System.String)">
            <summary>
            Takes a number and appends the ordinal suffix. ie. 1 = 1st, 13 = 13th.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.AppendOrdinalSuffix(System.Int32)">
            <summary>
            Takes a number and appends the ordinal suffix. ie. 1 = 1st, 13 = 13th.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Util.TryGetValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            Safely returns a value if GetValue succeeded, otherwise it returns null.
            </summary>
            <param name="property">The Source Property</param>
            <param name="value">The object whose property value will be returned.</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetLatestVersionInfo">
            <summary>
            Gets the latest released version number of CodeSmith that has been released.
            </summary>
            <returns>
            If an internet connection was detected it will return the version information of the latest released version of CodeSmith.
            If an internet connection could not be found then it returns null.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetCurrentVersion">
            <summary>
            Returns the Assembly file version information for the CodeSmith.Engine assembly.
            </summary>
            <returns>Returns the Assembly file version information for the CodeSmith.Engine assembly.</returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetShortVersion">
            <summary>
            Returns the current version information in the following format: 5.2.0000 (Major.Minor.Revision)
            </summary>
            <returns>Returns the current version information in the following format: 5.2.0000 (Major.Minor.Revision)</returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetShortBuild">
            <summary>
            Returns the current version information in the following format: 5.2.0000 (Major.Minor.Build)
            </summary>
            <returns>Returns the current version information in the following format: 5.2.0000 (Major.Minor.Build)</returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetVersionNumber">
            <summary>
            Returns the current version information in the following format: 5.2 (Major.Minor)
            </summary>
            <returns>Returns the current version information in the following format: 5.2 (Major.Minor)</returns>
        </member>
    </members>
</doc>
